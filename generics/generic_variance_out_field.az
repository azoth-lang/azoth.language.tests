// exit code: 1

public fn main() -> byte
{
    let s1 = new Circle();
    let s2 = new Circle();
    let p: mut Strange_Pair[Shape] = new Strange_Pair[Circle](s1, s2);

    if p.get_first() ≡/≡ s1 => return 0;
    if p.get_second() ≡/≡ s2 => return 0;

    // first and second can still be swapped even though now seen as `Shape`s because they must
    // have actually been the same type of `Shape` when it was constructed.
    p.swap();

    if p.get_first() ≡/≡ s2 => return 0;
    if p.get_second() ≡/≡ s1 => return 0;

    return 1;
}

public class Strange_Pair[T out]
{
    var first: T;
    var second: T;

    public new(mut self, .first, .second) { }

    public fn get_first(self) -> self▷T => .first;

    public fn get_second(self) -> self▷T => .second;

    public fn swap(mut self)
    {
        let old_first = .first;
        .first = .second;
        .second = old_first;
    }
}

public const trait Shape { }

public const class Circle <: Shape { }

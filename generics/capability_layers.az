// exit code: 24

public fn main() -> byte
{
    let v1: mut = new Value(42);
    let box: mut = new Box[mut Value](v1);
    let read_box: Box[mut Value] = box;
    //let foo: Box[Value] = box;

    // The box itself is now read only
    read_box.set_contents(new Value(13)); // ERROR cannot call `mut self` method on read only

    // Because of layers, we can still mutate the value inside the box.
    // let q: mut = read_box.get_contents();
    read_box.get_contents().value = 21;

    // Consumer uses Box[T] and Value
    let consumer: mut = new Consumer();
    // `mut Consumer` is fully mutable
    consumer.change_value(22);
    consumer.change_contents(new Value(23));
    consumer.change_box(box);

    let read_consumer: Consumer = consumer;
    let v2: mut = read_consumer.get_contents();
    v2.value = 24;

    return v1.value as! byte;
}

public class Value
{
    public var value: int;

    public new(mut self, .value) { }

    public fn is_const(const self) { }
}

public class Box[ind T]
{
    var value: T;

    public new(mut self, .value) { }

    public fn get_contents(self) -> T => .value;

    public fn set_contents(mut self, value: T)
    {
        .value = value;
    }
}

public class Consumer
{
    var box: mut Box[mut Value];

    public new(mut self)
    {
        .box = new Box[mut Value](new Value(42));
    }

    public fn change_value(mut self, value: int)
    {
        .box.get_contents().value = value;
    }

    public fn change_contents(mut self, contents: mut Value)
    {
        .box.set_contents(contents);
    }

    public fn change_box(mut self, box: mut Box[mut Value])
    {
        .box = box;
    }

    public fn get_contents(self) -> mut Value
    {
        return .box.get_contents(); // ERROR cannot convert `Value` to `mut Value`
    }

    public fn value_is_const(const self)
    {
        // This shows that the `const` of self has been applied to the inner type
        .box.get_contents().is_const();
    }
}

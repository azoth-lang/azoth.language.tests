// exit code: 23

public fn main() -> byte
{
    let editor = Book_Editor();
    let storage: Storage[Book] = Storage[mut Book](editor, Book(24));

    // Without the error below, even though `storage` is `Storage[Book]`, the `read_processed()`
    // method is able to mutate the book. It seems like there could be case where this even violates
    // `const`.
    let book = storage.read_processed();

    return book.pages;
}

public trait Pipeline[T]
{
    public fn process(self, value: T) -> T;
}

public class Storage[T ind]
{
    let value: T;
    let pipeline: Pipeline[T]; // ERROR does not maintain the independence

    public init(mut self, .pipeline, .value) { }

    // Because of the violation of independence above, this method is unsafe since the pipeline
    // stored uses the previous capabilities of `T`.
    public fn read_processed(self) -> T
        // If `T` could be used in `pipeline`, it would be unsafe because pipeline expects `T` as
        // constructed, but `T` may now be a supertype of the previous `T`.
        => .pipeline.process(.value);

    // This method is safe since the pipeline passed in is restricted to the current capabilities of
    // `T`.
    public fn read_processed_with(self, p: Pipeline[T]) -> T
        => p.process(.value);
}

public class Book_Editor <: Pipeline[mut Book]
{
    public fn process(self, book: mut Book) -> mut Book
    {
        // Do some mutation on the book here
        book.pages -= 1;
        return book;
    }
}

public class Book
{
    public var pages: byte;

    public init(mut self, .pages) { }
}

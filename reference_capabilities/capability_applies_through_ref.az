// This test shows that a type like `read |> iref mut Example` implies that the `Example` is now not
// mutable through this reference.

public fn main()
{
    let box: mut = Box[mut Example](Example());
    box.at().mutate(); // works because `box` is mutable

    let read_box: Box[mut Example] = box;
    read_box.at().read_value();
    read_box.at().mutate(); // ERROR cannot mutate through read only reference
}

public class Example
{
    public fn read_value(self) { }
    public fn mutate(mut self) { }
}

public class Box[T]
{
    let value: T;

    public init(mut self, .value) { }

    // TODO maybe this return type ought to be iref (self |> T)
    public fn at(readable self) -> self |> iref T
        => iref .value;
}

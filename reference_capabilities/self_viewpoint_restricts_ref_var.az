public fn main() -> byte
{
    let box: mut = IntBox(1);

    // Mutable box
    let x = box.at(); // TODO does this now have type `ref var`?
    box.at() = x + x; // can assign to `ref var` because `box` is mutable
    if box.at() =/= 2 => return 1;

    let read_box = box;
    let y = read_box.at(); // TODO does this now have type `ref var`?
    read_box.at() = y; // ERROR cannot assign `ref` (because read_box does not allow mutate)

    freeze box;
    let z = read_box.at(); // TODO does this now have type `ref var`?
    box.at() = z; // ERROR cannot assign `ref` (because box is now const)

    return 0;
}

public class IntBox
{
    var value: int;

    public init(mut self, .value) { }

    public fn at(readable self) -> self |> ref var int
        => ref var .value;
}
